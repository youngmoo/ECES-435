{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/youngmoo/ECES-435/blob/main/Class1-1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FcIDjLieV1uc"
      },
      "source": [
        "# **Welcome to ECES-435: Recent Advances in DSP!**\n",
        "I believe the best way to learn to apply Digital Signal Processing (DSP) is to actually implement it in code. That's why this class is entirely project-based, and every class & lab session we'll be live-coding signal processing methods and concepts in Python in the Google Colab environment. \n",
        "\n",
        "You will need a (free) Google account with at least a few GB of free Google Drive space. Let's get started!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uj7-Ld1WXQKb"
      },
      "source": [
        "## Sign in to Google\n",
        "\n",
        "You won't be able to execute any code in a Colab Notebook until you sign in with a Google account. Check the top-right corner of your browser window. If it says \"Sign in\", click it and log into your account.\n",
        "\n",
        "*   If you don't have a Google account, [you can create one](https://accounts.google.com/signup) (it's free, and it comes with 15 GB of Google Drive space).\n",
        "*   If you don't have much free Google Drive space (or just want to keep this class work separate), you can also create a new account. Yes, you can have multiple Google accounts (though this can get confusing)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zh7h4m_lZAzY"
      },
      "source": [
        "## Really basic computation\n",
        "You don't have to do anything else before doing really basic computation. Feel free to alter and run the equation in the code block below until you're satisfied it works as a calculator (nothing fancy, but it does come in handy)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UoJArB8QZCS8"
      },
      "source": [
        "# Change the numbers, the arithmetic operator, add anything or whatever, and see what happens.\n",
        "(2+2) * 2     # Also, notice how everything after the hashtag is a comment, and ignored as code."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I--7VTlKahW7"
      },
      "source": [
        "## About these text blocks\n",
        "One of the great things about Colab is that you can save both your Python code *and* descriptions, explanations, or any text (e.g., what you're reading right now). These are captured together in a Colab *Notebook* (e.g., this document). This is an implementation of the popular [Jupyter Notebooks](https://jupyter.org) platform, which has quickly become the standard for work in signal processing and machine learning.\n",
        "\n",
        "*   Text can be formatted using Markdown syntax. *Sidenote:* Markdown was created by Drexel alum, John Gruber, also the creator of [Daring Fireball](https://daringfireball.net), one of the most popular tech blogs.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "upyWxd9tZpLI"
      },
      "source": [
        "## Something (barely) more useful\n",
        "Let's do something a little more complex/useful. We're going to need to use the [Numerical Python (NumPy)](https://numpy.org) module (like a library) that provides MATLAB-style arrays and much more."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ppuJLe5PZrlZ"
      },
      "source": [
        "import numpy as np              # Load the NumPy module, which we'll access via the abbreviation 'np'.\n",
        "                                #   Now we can use any NumPy function using: np.function...\n",
        "\n",
        "n = 1                           # Set a sample number (time), n = 1\n",
        "N = 10                          # Set the period N = 10 samples\n",
        "x = np.sin(2 * np.pi * n / N )  # Compute sin(2πn/N); notice how sin() and π are part of the 'np' module\n",
        "x                               # Output the value of x"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JHnGW5w-fifZ"
      },
      "source": [
        "## A bit more useful...\n",
        "OK, that's still pretty boring, but notice how we can have multiple lines of code in a code block. That's kind of useful as a way to organize code into separate, more readable sections.\n",
        "* But what we'd like is to compute sin[n] not just for one time value, but many time values. Sure, we can do that..."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k6tCgRBggJxb"
      },
      "source": [
        "for n in range(N+1):              # Let's create a loop for all integers from 0 up to and including, N (10)\n",
        "  x = np.sin(2 * np.pi * n / N)   # Compute sin() using the current value of n. Note that 'np' (and N)\n",
        "                                  #   are still valid, since they were defined in a previous code block.\n",
        "  print(n, x)                     # Each code block allows one output, so we use print() \n",
        "                                  #   to output x each time through the loop."
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2J9SBhn6ihXC"
      },
      "source": [
        "## Actually useful: Let's do this\n",
        "What we need is to compute a function, like sin() or perhaps something much more complicated, for a lot of different time (or input) values, and group them into a single output variable (as an array).\n",
        "* This is how NumPy provides something more like MATLAB, by allowing functions to work not only on single (scalar) input values, but on input arrays. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jWDwXot9kISb"
      },
      "source": [
        "n = np.arange(3*N+1)            # Create an input array of integers from 0 to 3N (30)\n",
        "x = np.sin(2 * np.pi * n / N)   # x is now an array of outputs\n",
        "x                               # See?"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0qnqwEtnlZ21"
      },
      "source": [
        "## Meh. Can we *visualize* the result?\n",
        "Lists of numbers are tedious (and can obscure what's going on in the data). Fortunately, we can easily plot these outputs using another Python module, Matplotlib, which enables MATLAB-like plotting."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Q1ipcwFLmEUF"
      },
      "source": [
        "import matplotlib.pyplot as plt   # Load the Matplotlib module, which we'll access via the abbreviation 'plt'\n",
        "\n",
        "plt.plot(n,x)                     # Plot x vs. n\n",
        "\n",
        "# Uncomment the following lines to see what they do\n",
        "# plt.title('x[n] = sin[2$\\pi$n/N]')\n",
        "# plt.xlabel('n')\n",
        "# plt.ylabel('x[n]')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## That figure is pretty small\n",
        "As you might imagine, Matplotlib lets you adjust nearly every parameter of the figure.\n",
        "* The trick is to create a figure of the size you want, and then Matplotlib will adjust the plot to fit your figure."
      ],
      "metadata": {
        "id": "K8dmE7Tnb5-x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a new figure\n",
        "fig1 = plt.figure(figsize=(12,4))   # Width and height in \"inches\", feel free to change these\n",
        "plt.plot(n,x);                      # Note the extra semicolon (;) at the end of the line.\n",
        "                                    #   See what happens if you remove it."
      ],
      "metadata": {
        "id": "FpoEGe5vb5m5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Why does that sine wave look weird?\n",
        "Because it's actually just plotting the points we computed and connecting those with straight lines.\n",
        "* This is a more accurate view of the signal we created."
      ],
      "metadata": {
        "id": "SgFFwkSvpEed"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig2 = plt.figure(figsize=[12,4])\n",
        "plt.plot(n, x, '.', markersize=10);"
      ],
      "metadata": {
        "id": "XYyLI8u1pDzU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The solution: Let's add more points\n",
        "We'll increase the number of points by a factor, *P*."
      ],
      "metadata": {
        "id": "O6sSugNwt7KO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "P = 10\n",
        "n_P = np.arange(P*3*N + 1) / P           # What does this do?\n",
        "x_P = np.sin(2 * np.pi * n_P / N)\n",
        "\n",
        "fig3 = plt.figure(figsize=[12,4])\n",
        "plt.plot(n_P, x_P, '.', markersize=10);   \n",
        "# plt.plot(n_P, x_P);                    # Uncomment to see it as a line plot"
      ],
      "metadata": {
        "id": "E6KeDqm7qGoi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## The plot labels are tiny and the font is ugly. Can I change that?\n",
        "You can change just about everything in Matplotlib."
      ],
      "metadata": {
        "id": "vTFFjUgPuaRi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.rc('font', family='Liberation Serif') # Nicer font\n",
        "plt.rc('font', size=20)                   # Larger font size for labels\n",
        "\n",
        "fig4 = plt.figure(figsize=[12,4])\n",
        "plt.plot(n_P, x_P);\n",
        "#plt.plot(n_P, x_P, '--', color='green', linewidth=5)   # Uncomment to try some style variations"
      ],
      "metadata": {
        "id": "FKnTVaRsrXZw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Save this awesome figure to a PNG image\n",
        "It is saved on the remote Colab machine. You can see it by selecting the files (folder) icon on the left edge of the window.\n",
        "* You can download the file by right-clicking on it (or using the 3 dots button that appears when you hover over the filename)."
      ],
      "metadata": {
        "id": "BQNXG6ultwL1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig4.savefig(\"awesome_plot.png\")"
      ],
      "metadata": {
        "id": "97yLDq3rtadv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JInw42tSd3YQ"
      },
      "source": [
        "## Big Deal: Let's connect to Google Drive\n",
        "\n",
        "One of the great features of Colab is access to Google Drive, to store and share both notebooks and data files. We'll use a *shared* Google Drive folder to load and save sound files.\n",
        "\n",
        "1.   Open the link to [this Google Drive folder](https://drive.google.com/drive/folders/1eL0DgtfN9sitV_1V7nwexzxaalXoWM-V?usp=sharing).\n",
        "2.   Within Google Drive, for this shared folder select \"Add shortcut to Drive\" and add it to the top-level directory, \"My Drive\". (This is so we can all use the same directory path for loading and saving files.)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "p0rCNu3Br7tA"
      },
      "source": [
        "## Add the shared Google Drive folder to Colab\n",
        "Next, we mount the Google Drive folder you just added within colab. Run the next code block, which will:\n",
        "\n",
        "*   Ask  you for permission to access your Google Drive.\n",
        "*   Once you give permission, your Google Drive will be available at:\n",
        "  * `/content/drive/MyDrive/`"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7f-OzFc_mN4w"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Save the figure to today's class folder on Google Drive"
      ],
      "metadata": {
        "id": "B9P2yaGlyFN3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class_dir = '/content/drive/MyDrive/eces435-work/class1.1/'\n",
        "\n",
        "# Change the placeholder (abc123) to your Drexel account name and uncomment the next line\n",
        "username = 'xyz456'\n",
        "\n",
        "fig4.savefig(class_dir + username + '-awesome_plot.png')"
      ],
      "metadata": {
        "id": "ZqaRJHlAyEgd"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}